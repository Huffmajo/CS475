#!/bin/bash 

# delete previous results.txt if it exists
rm -f results.txt

# run array multiply benchmark
# print method and table headers
echo "Array Multiply"
echo "GlobalWorkSize LocalWorkSize NumWorkGroups Gigamults/second "

# global work size
for globalWork in 1024 16384 262144 524288 1048576 2097152 4194304 8388608
do
	# local work size
	for localWork in 4 16 64 256 1024
	do
		# Define benchmark variables and compile
		g++ -o project5 project5.c /scratch/cuda-7.0/lib64/libOpenCL.so -DLOCAL_SIZE=$localWork -DNUM_ELEMENTS=$globalWork -lm -fopenmp

		# run program
		./project5
	done
done
echo " "

# run array multiply-add benchmark
# print method and table headers
echo "Array Multiply-Add"
echo "GlobalWorkSize LocalWorkSize NumWorkGroups Gigamults/second "

# global work size
#for globalWork in 1024 4096 16384 65536 262144 1048576 4194304 16777216
for globalWork in 1024 16384 262144 524288 1048576 2097152 4194304 8388608
do
	# local work size
	for localWork in 4 16 64 256 1024
#	for localWork in 4 8 16 32 64 128 256 512 1024
	do
		# Define benchmark variables and compile
		g++ -o project5 project5.c /scratch/cuda-7.0/lib64/libOpenCL.so -DMULTADD -DLOCAL_SIZE=$localWork -DNUM_ELEMENTS=$globalWork -lm -fopenmp

		# run program
		./project5
	done
done
echo " "

# run array multiply with reduction benchmark
# print method and table headers
echo "Array Multiply Reduction"
echo "GlobalWorkSize LocalWorkSize NumWorkGroups Gigamults/second "

# global work size
for globalWork in 1024 16384 262144 524288 1048576 2097152 4194304 8388608
do
	# local work size
	for localWork in 32 64 128 256
	do
		# Define benchmark variables and compile
		g++ -o reduce reduce.c /scratch/cuda-7.0/lib64/libOpenCL.so -DLOCAL_SIZE=$localWork -DNUM_ELEMENTS=$globalWork -lm -fopenmp

		# run program
		./reduce
	done
done

# clean-up compiled file
rm project5
rm reduce
